#!/usr/bin/env python3
"""
Test del Slider de Primera Minor√≠a usando la API HTTP
Verifica que el slider de PM realmente afecte la distribuci√≥n de esca√±os
"""

import requests
import json

BASE_URL = "http://localhost:8001"

def test_api_primera_minoria():
    """
    Testa el slider de primera minor√≠a usando la API HTTP
    """
    
    print("üß™ TEST SLIDER PRIMERA MINOR√çA - V√çA API")
    print("=" * 50)
    
    # Configuraciones a probar - simulando diferentes ajustes del slider PM
    configs = [
        {
            "nombre": "Plan C - Solo MR (64 esca√±os)",
            "plan": "plan_c",
            "anio": 2018,
            "descripcion": "Sistema mayor√≠a relativa puro"
        },
        {
            "nombre": "Sistema Vigente (96MR+32RP)", 
            "plan": "vigente",
            "anio": 2018,
            "descripcion": "Incluye primera minor√≠a autom√°tica"
        },
        {
            "nombre": "Plan A - Solo RP (96 esca√±os)",
            "plan": "plan_a", 
            "anio": 2018,
            "descripcion": "Sistema representaci√≥n proporcional puro"
        },
        {
            "nombre": "Personalizado 80MR+48RP",
            "plan": "personalizado",
            "anio": 2018,
            "sistema": "mixto",
            "mr_seats": 80,
            "rp_seats": 48,
            "descripcion": "Sistema mixto personalizado"
        },
        {
            "nombre": "Personalizado 100MR+28RP", 
            "plan": "personalizado",
            "anio": 2018,
            "sistema": "mixto",
            "mr_seats": 100,
            "rp_seats": 28,
            "descripcion": "M√°s MR, menos RP"
        }
    ]
    
    resultados = []
    
    for config in configs:
        print(f"\nüìä {config['nombre']}")
        print(f"   {config['descripcion']}")
        print("-" * 40)
        
        try:
            # Preparar payload para API
            payload = {
                "anio": config["anio"],
                "plan": config["plan"]
            }
            
            # Agregar par√°metros espec√≠ficos si es personalizado
            if config["plan"] == "personalizado":
                payload.update({
                    "sistema": config.get("sistema", "mixto"),
                    "mr_seats": config.get("mr_seats"),
                    "rp_seats": config.get("rp_seats"),
                    "umbral": 0.0
                })
            
            # Llamada a la API
            response = requests.post(f"{BASE_URL}/procesar/senado", json=payload)
            
            if response.status_code == 200:
                data = response.json()
                
                if "seat_chart" in data:
                    escanos = data["seat_chart"]
                    total = sum(escanos.values())
                    
                    print(f"   ‚úÖ Total esca√±os: {total}")
                    
                    # Mostrar top partidos
                    partidos_ordenados = sorted(escanos.items(), key=lambda x: x[1], reverse=True)
                    for i, (partido, seats) in enumerate(partidos_ordenados[:4]):
                        if seats > 0:
                            porcentaje = (seats/total)*100
                            print(f"   {i+1}. {partido}: {seats} ({porcentaje:.1f}%)")
                    
                    # Obtener datos del sistema
                    sistema_info = data.get("configuracion", {})
                    mr_seats = sistema_info.get("mr_seats", "N/A")
                    rp_seats = sistema_info.get("rp_seats", "N/A") 
                    
                    print(f"   Sistema: {mr_seats} MR + {rp_seats} RP")
                    
                    resultados.append({
                        "config": config["nombre"],
                        "plan": config["plan"],
                        "total": total,
                        "mr_seats": mr_seats,
                        "rp_seats": rp_seats,
                        "morena": escanos.get('MORENA', 0),
                        "pan": escanos.get('PAN', 0),
                        "pri": escanos.get('PRI', 0),
                        "success": True
                    })
                    
                else:
                    print("   ‚ùå No se encontr√≥ seat_chart en respuesta")
                    resultados.append({
                        "config": config["nombre"],
                        "plan": config["plan"], 
                        "success": False,
                        "error": "No seat_chart"
                    })
                    
            else:
                print(f"   ‚ùå Error HTTP {response.status_code}: {response.text}")
                resultados.append({
                    "config": config["nombre"],
                    "plan": config["plan"],
                    "success": False,
                    "error": f"HTTP {response.status_code}"
                })
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            resultados.append({
                "config": config["nombre"],
                "plan": config["plan"],
                "success": False,
                "error": str(e)
            })
    
    # Tabla de resultados exitosos
    exitosos = [r for r in resultados if r.get("success", False)]
    
    if exitosos:
        print("\n" + "=" * 80)
        print("üìã TABLA COMPARATIVA - DIFERENTES PLANES ELECTORALES")
        print("=" * 80)
        print(f"{'PLAN':<25} | {'MR':<6} | {'RP':<6} | {'MORENA':<6} | {'PAN':<6} | {'PRI':<6} | {'TOTAL':<6}")
        print("-" * 80)
        
        for r in exitosos:
            print(f"{r['plan']:<25} | {str(r['mr_seats']):<6} | {str(r['rp_seats']):<6} | {r['morena']:<6} | {r['pan']:<6} | {r['pri']:<6} | {r['total']:<6}")
        
        # An√°lisis de variaciones
        print("\nüîç AN√ÅLISIS DE VARIACIONES:")
        print("-" * 40)
        
        morena_values = [r['morena'] for r in exitosos]
        pan_values = [r['pan'] for r in exitosos]
        
        if len(morena_values) > 1:
            morena_min, morena_max = min(morena_values), max(morena_values)
            pan_min, pan_max = min(pan_values), max(pan_values)
            
            print(f"MORENA: rango {morena_min}-{morena_max} esca√±os (variaci√≥n: {morena_max-morena_min})")
            print(f"PAN: rango {pan_min}-{pan_max} esca√±os (variaci√≥n: {pan_max-pan_min})")
            
            if morena_max - morena_min > 0 or pan_max - pan_min > 0:
                print("‚úÖ Los diferentes planes S√ç producen variaciones en esca√±os")
            else:
                print("‚ùå Los planes no muestran variaciones significativas")
        
        # Comparaci√≥n espec√≠fica Plan C vs Vigente vs Plan A
        plan_c = next((r for r in exitosos if r['plan'] == 'plan_c'), None)
        vigente = next((r for r in exitosos if r['plan'] == 'vigente'), None)
        plan_a = next((r for r in exitosos if r['plan'] == 'plan_a'), None)
        
        if plan_c and vigente and plan_a:
            print(f"\nüîÑ COMPARACI√ìN CLAVE:")
            print(f"Plan C (MR puro):    MORENA {plan_c['morena']}, PAN {plan_c['pan']}, PRI {plan_c['pri']}")
            print(f"Vigente (MR+PM+RP):  MORENA {vigente['morena']}, PAN {vigente['pan']}, PRI {vigente['pri']}")
            print(f"Plan A (RP puro):    MORENA {plan_a['morena']}, PAN {plan_a['pan']}, PRI {plan_a['pri']}")
            
            # Calcular diferencias
            diff_c_vigente = vigente['morena'] - plan_c['morena']
            diff_vigente_a = plan_a['morena'] - vigente['morena']
            
            print(f"\nImpacto de Primera Minor√≠a:")
            print(f"- MR puro ‚Üí MR+PM+RP: MORENA {diff_c_vigente:+d} esca√±os")
            print(f"- MR+PM+RP ‚Üí RP puro: MORENA {diff_vigente_a:+d} esca√±os")
    
    else:
        print("\n‚ùå No se obtuvieron resultados exitosos")
    
    # Resumen de errores
    errores = [r for r in resultados if not r.get("success", False)]
    if errores:
        print(f"\n‚ö†Ô∏è  Se encontraron {len(errores)} errores:")
        for r in errores:
            print(f"   - {r['config']}: {r.get('error', 'Error desconocido')}")
    
    print(f"\n‚úÖ TEST COMPLETADO: {len(exitosos)}/{len(resultados)} configuraciones exitosas")
    
    return exitosos

if __name__ == "__main__":
    print("üöÄ Iniciando test del slider de Primera Minor√≠a...")
    print("üì° Aseg√∫rate de que el servidor est√© corriendo en http://localhost:8001")
    print()
    
    try:
        # Verificar que el servidor est√© disponible
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Servidor conectado correctamente")
            test_api_primera_minoria()
        else:
            print(f"‚ùå Servidor no responde correctamente: {response.status_code}")
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {e}")
        print("üí° Ejecuta 'python main.py' en otra terminal primero")
