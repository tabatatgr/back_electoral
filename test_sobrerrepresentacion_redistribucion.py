"""
Test para verificar si la sobrerrepresentaci√≥n ELIMINA o REDISTRIBUYE esca√±os
"""

import numpy as np
from engine.core import apply_overrep_cap

def test_sobrerrepresentacion_redistribucion():
    """
    Verificar si la sobrerrepresentaci√≥n elimina esca√±os o los redistribuye
    """
    print("üîç TEST: ¬øLa sobrerrepresentaci√≥n elimina o redistribuye esca√±os?")
    print("=" * 70)
    
    # Configurar un caso de prueba realista
    # Simulamos un partido dominante con sobrerrepresentaci√≥n
    S = 128  # Total de esca√±os
    
    # Caso 1: Sin sobrerrepresentaci√≥n (baseline)
    print("\nüìä CASO 1: SIN SOBRERREPRESENTACI√ìN")
    print("-" * 40)
    
    # Votos simulados
    vote_share = np.array([0.43, 0.20, 0.18, 0.12, 0.07])  # MORENA dominante
    partidos = ['MORENA', 'PAN', 'PRI', 'PRD', 'OTROS']
    
    # Esca√±os iniciales (sin limitaci√≥n)
    seats_inicial = np.array([62, 24, 22, 14, 6])  # Total = 128
    
    print("Esca√±os iniciales:")
    for i, partido in enumerate(partidos):
        pct_escanos = (seats_inicial[i] / S) * 100
        pct_votos = vote_share[i] * 100
        sobrer = pct_escanos - pct_votos
        print(f"  {partido}: {seats_inicial[i]} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}%")
    
    print(f"\nTOTAL ESCA√ëOS: {seats_inicial.sum()}")
    
    # Caso 2: Con sobrerrepresentaci√≥n del 8%
    print("\nüìä CASO 2: CON SOBRERREPRESENTACI√ìN 8%")
    print("-" * 40)
    
    over_cap = 0.08  # 8% de sobrerrepresentaci√≥n m√°xima
    seats_con_cap = apply_overrep_cap(seats_inicial, vote_share, S, over_cap)
    
    print("Esca√±os con limitaci√≥n:")
    escanos_removidos = 0
    escanos_a√±adidos = 0
    
    for i, partido in enumerate(partidos):
        antes = seats_inicial[i]
        despues = seats_con_cap[i]
        cambio = despues - antes
        pct_escanos = (despues / S) * 100
        pct_votos = vote_share[i] * 100
        sobrer = pct_escanos - pct_votos
        
        if cambio != 0:
            if cambio > 0:
                escanos_a√±adidos += cambio
                print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | GAN√ì {cambio:+d}")
            else:
                escanos_removidos += abs(cambio)
                print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | PERDI√ì {cambio}")
        else:
            print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | Sin cambio")
    
    print(f"\nTOTAL ESCA√ëOS: {seats_con_cap.sum()}")
    print(f"Esca√±os removidos: {escanos_removidos}")
    print(f"Esca√±os a√±adidos: {escanos_a√±adidos}")
    
    # Caso 3: Sobrerrepresentaci√≥n m√°s estricta (4%)
    print("\nüìä CASO 3: CON SOBRERREPRESENTACI√ìN 4% (M√ÅS ESTRICTA)")
    print("-" * 50)
    
    over_cap_estricto = 0.04  # 4% de sobrerrepresentaci√≥n m√°xima
    seats_estricto = apply_overrep_cap(seats_inicial, vote_share, S, over_cap_estricto)
    
    print("Esca√±os con limitaci√≥n estricta:")
    escanos_removidos_est = 0
    escanos_a√±adidos_est = 0
    
    for i, partido in enumerate(partidos):
        antes = seats_inicial[i]
        despues = seats_estricto[i]
        cambio = despues - antes
        pct_escanos = (despues / S) * 100
        pct_votos = vote_share[i] * 100
        sobrer = pct_escanos - pct_votos
        
        if cambio != 0:
            if cambio > 0:
                escanos_a√±adidos_est += cambio
                print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | GAN√ì {cambio:+d}")
            else:
                escanos_removidos_est += abs(cambio)
                print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | PERDI√ì {cambio}")
        else:
            print(f"  {partido}: {despues} esca√±os ({pct_escanos:.1f}%) | {pct_votos:.1f}% votos | Sobrer: {sobrer:+.1f}% | Sin cambio")
    
    print(f"\nTOTAL ESCA√ëOS: {seats_estricto.sum()}")
    print(f"Esca√±os removidos: {escanos_removidos_est}")
    print(f"Esca√±os a√±adidos: {escanos_a√±adidos_est}")
    
    # An√°lisis final
    print("\nüéØ AN√ÅLISIS Y CONCLUSIONES")
    print("=" * 50)
    
    if seats_inicial.sum() == seats_con_cap.sum() == seats_estricto.sum():
        print("‚úÖ CONFIRMADO: La sobrerrepresentaci√≥n REDISTRIBUYE esca√±os")
        print("   ‚Ä¢ El total de esca√±os se mantiene constante")
        print("   ‚Ä¢ Los esca√±os quitados a partidos sobrerrepresentados")
        print("   ‚Ä¢ Se redistribuyen a partidos que est√°n por debajo del l√≠mite")
        print("   ‚Ä¢ Utiliza el m√©todo de resto mayor (largest remainder) para la redistribuci√≥n")
    else:
        print("‚ùå ERROR: Parece que se eliminan esca√±os")
        print(f"   ‚Ä¢ Inicial: {seats_inicial.sum()}")
        print(f"   ‚Ä¢ Con cap 8%: {seats_con_cap.sum()}")
        print(f"   ‚Ä¢ Con cap 4%: {seats_estricto.sum()}")
    
    # Verificar el mecanismo espec√≠fico
    print("\nüîß MECANISMO T√âCNICO:")
    print("1. Se calcula el l√≠mite: cap = floor((porcentaje_votos + sobrerrepresentacion) * total_esca√±os)")
    print("2. Se aplica el tope: esca√±os = min(esca√±os_actuales, l√≠mite)")
    print("3. Se calcula el d√©ficit: delta = total_esca√±os - suma_esca√±os_despu√©s_del_tope")
    print("4. Se redistribuye el d√©ficit usando resto mayor entre partidos con margen disponible")
    
    # Ejemplo espec√≠fico con MORENA
    morena_votos = vote_share[0] * 100
    morena_escanos_inicial = (seats_inicial[0] / S) * 100
    morena_escanos_con_cap = (seats_con_cap[0] / S) * 100
    
    print(f"\nüìà EJEMPLO MORENA:")
    print(f"   ‚Ä¢ Votos: {morena_votos:.1f}%")
    print(f"   ‚Ä¢ Esca√±os inicial: {morena_escanos_inicial:.1f}% (sobrerr: {morena_escanos_inicial-morena_votos:+.1f}%)")
    print(f"   ‚Ä¢ Esca√±os con cap 8%: {morena_escanos_con_cap:.1f}% (sobrerr: {morena_escanos_con_cap-morena_votos:+.1f}%)")
    print(f"   ‚Ä¢ L√≠mite te√≥rico: {morena_votos + 8:.1f}%")
    
    return {
        'redistribuye': seats_inicial.sum() == seats_con_cap.sum() == seats_estricto.sum(),
        'esca√±os_inicial': seats_inicial.sum(),
        'esca√±os_con_cap_8': seats_con_cap.sum(),
        'esca√±os_con_cap_4': seats_estricto.sum(),
        'cambios_8': dict(zip(partidos, seats_con_cap - seats_inicial)),
        'cambios_4': dict(zip(partidos, seats_estricto - seats_inicial))
    }

if __name__ == "__main__":
    resultado = test_sobrerrepresentacion_redistribucion()
    
    if resultado['redistribuye']:
        print("\nüèÜ RESPUESTA A TU PREGUNTA:")
        print("La sobrerrepresentaci√≥n NO elimina esca√±os, los REDISTRIBUYE")
        print("Mantiene el total constante pero limita la sobrerrepresentaci√≥n individual")
    else:
        print("\n‚ö†Ô∏è  Necesitamos investigar m√°s el comportamiento")
