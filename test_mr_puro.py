#!/usr/bin/env python3
"""
Test de Mayor√≠a Relativa PURA
Verificar qu√© pasa cuando se elige solo MR (sin RP ni PM)
"""

import sys
sys.path.append('.')

from engine.procesar_senadores_v2 import procesar_senadores_v2

def test_mayoria_relativa_pura():
    """Test para verificar el comportamiento con MR puro"""
    
    print("üîç TEST MAYOR√çA RELATIVA PURA")
    print("=" * 50)
    print("Verificando comportamiento con solo MR (sin RP ni PM)")
    print()
    
    configs = [
        {
            "nombre": "64 MR puro (Plan C estilo)",
            "sistema": "mr",
            "mr_seats": 64,
            "rp_seats": 0,
            "pm_seats": 0,
            "max_seats": 64,
            "esperado_total": 64
        },
        {
            "nombre": "96 MR puro (m√°s esca√±os)",
            "sistema": "mr", 
            "mr_seats": 96,
            "rp_seats": 0,
            "pm_seats": 0,
            "max_seats": 96,
            "esperado_total": 96
        },
        {
            "nombre": "128 MR puro (todos MR)",
            "sistema": "mr",
            "mr_seats": 128,
            "rp_seats": 0,
            "pm_seats": 0,
            "max_seats": 128,
            "esperado_total": 128
        },
        {
            "nombre": "32 MR puro (m√≠nimo)",
            "sistema": "mr",
            "mr_seats": 32,
            "rp_seats": 0,
            "pm_seats": 0,
            "max_seats": 32,
            "esperado_total": 32
        }
    ]
    
    resultados = []
    
    for config in configs:
        print(f"üìä {config['nombre']}")
        print(f"   Configuraci√≥n: {config['mr_seats']} MR, {config['rp_seats']} RP, {config['pm_seats']} PM")
        print("-" * 55)
        
        try:
            resultado = procesar_senadores_v2(
                path_parquet="data/computos_senado_2018.parquet",
                anio=2018,
                path_siglado="data/siglado_senado_2018_corregido.csv",
                sistema=config["sistema"],
                mr_seats=config["mr_seats"],
                rp_seats=config["rp_seats"],
                pm_seats=config["pm_seats"],
                max_seats=config["max_seats"],
                umbral=0.03
            )
            
            if resultado and "seat_chart" in resultado:
                seat_chart = resultado["seat_chart"]
                
                # Calcular totales
                escanos = {}
                for item in seat_chart:
                    if isinstance(item, dict) and 'party' in item and 'seats' in item:
                        escanos[item['party']] = item['seats']
                
                total_real = sum(escanos.values())
                
                # Verificaciones
                print(f"   ‚úÖ Total real: {total_real}")
                print(f"   üéØ Total esperado: {config['esperado_total']}")
                
                if total_real == config['esperado_total']:
                    print(f"   ‚úÖ CORRECTO: Total coincide")
                else:
                    print(f"   ‚ùå ERROR: Total deber√≠a ser {config['esperado_total']}, pero es {total_real}")
                
                # Mostrar distribuci√≥n detallada
                morena = escanos.get("MORENA", 0)
                pan = escanos.get("PAN", 0)
                pri = escanos.get("PRI", 0)
                prd = escanos.get("PRD", 0)
                pvem = escanos.get("PVEM", 0)
                pt = escanos.get("PT", 0)
                mc = escanos.get("MC", 0)
                
                print(f"   Distribuci√≥n:")
                print(f"   - MORENA: {morena} ({(morena/total_real)*100:.1f}%)")
                print(f"   - PAN: {pan} ({(pan/total_real)*100:.1f}%)")
                print(f"   - PRI: {pri} ({(pri/total_real)*100:.1f}%)")
                print(f"   - PRD: {prd} ({(prd/total_real)*100:.1f}%)")
                print(f"   - PVEM: {pvem} ({(pvem/total_real)*100:.1f}%)")
                print(f"   - PT: {pt} ({(pt/total_real)*100:.1f}%)")
                print(f"   - MC: {mc} ({(mc/total_real)*100:.1f}%)")
                
                # Calcular concentraci√≥n (¬øes muy desigual?)
                total_top_3 = morena + pan + pri
                concentracion = (total_top_3 / total_real) * 100
                print(f"   - Top 3 partidos: {concentracion:.1f}% de esca√±os")
                
                resultados.append({
                    "config": config['nombre'],
                    "mr_seats": config['mr_seats'],
                    "total_real": total_real,
                    "total_esperado": config['esperado_total'],
                    "correcto": total_real == config['esperado_total'],
                    "morena": morena,
                    "pan": pan,
                    "pri": pri,
                    "prd": prd,
                    "pvem": pvem,
                    "pt": pt,
                    "mc": mc,
                    "concentracion": concentracion
                })
                
            else:
                print("   ‚ùå Error: No se obtuvo seat_chart")
                resultados.append({
                    "config": config['nombre'],
                    "error": True
                })
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            resultados.append({
                "config": config['nombre'],
                "error": True,
                "mensaje": str(e)
            })
        
        print()
    
    # An√°lisis comparativo
    exitosos = [r for r in resultados if not r.get("error", False)]
    
    if exitosos:
        print("=" * 90)
        print("üìã AN√ÅLISIS DE MAYOR√çA RELATIVA PURA")
        print("=" * 90)
        print(f"{'CONFIGURACI√ìN':<25} | {'MR':<4} | {'TOTAL':<6} | {'MORENA':<6} | {'PAN':<6} | {'PRI':<6} | {'CONC%':<6}")
        print("-" * 90)
        
        for r in exitosos:
            print(f"{r['config']:<25} | {r['mr_seats']:<4} | {r['total_real']:<6} | {r['morena']:<6} | {r['pan']:<6} | {r['pri']:<6} | {r['concentracion']:<6.1f}")
        
        print()
        print("üîç AN√ÅLISIS DE PATRONES:")
        print("-" * 35)
        
        # Verificar si hay escalamiento proporcional
        morena_values = [r['morena'] for r in exitosos]
        pan_values = [r['pan'] for r in exitosos]
        pri_values = [r['pri'] for r in exitosos]
        mr_sizes = [r['mr_seats'] for r in exitosos]
        
        print(f"MORENA por tama√±o MR: {dict(zip(mr_sizes, morena_values))}")
        print(f"PAN por tama√±o MR: {dict(zip(mr_sizes, pan_values))}")
        print(f"PRI por tama√±o MR: {dict(zip(mr_sizes, pri_values))}")
        
        # Verificar concentraci√≥n
        concentraciones = [r['concentracion'] for r in exitosos]
        print(f"Concentraci√≥n Top 3: {min(concentraciones):.1f}% - {max(concentraciones):.1f}%")
        
        if max(concentraciones) - min(concentraciones) < 5:
            print("‚úÖ CONCENTRACI√ìN ESTABLE: La distribuci√≥n es proporcional al tama√±o")
        else:
            print("‚ö†Ô∏è  CONCENTRACI√ìN VARIABLE: El tama√±o afecta la distribuci√≥n")
        
        # Verificar eficiencia de MORENA
        print(f"\nüìä EFICIENCIA DE MORENA EN MR PURO:")
        for r in exitosos:
            eficiencia = (r['morena'] / r['total_real']) * 100
            print(f"   {r['mr_seats']} MR: {r['morena']} esca√±os = {eficiencia:.1f}%")
        
        # Comparar con sistema mixto vigente (referencia)
        print(f"\nüîÑ COMPARACI√ìN CON SISTEMA VIGENTE:")
        print(f"   Sistema vigente (96MR+32RP): MORENA ~65/128 = 50.8%")
        
        mr_96 = next((r for r in exitosos if r['mr_seats'] == 96), None)
        if mr_96:
            eficiencia_96_puro = (mr_96['morena'] / mr_96['total_real']) * 100
            print(f"   96 MR puro: MORENA {mr_96['morena']}/{mr_96['total_real']} = {eficiencia_96_puro:.1f}%")
            print(f"   Diferencia: {eficiencia_96_puro - 50.8:.1f} puntos porcentuales")
        
        # Verificar diversidad partidista
        print(f"\nüé≠ DIVERSIDAD PARTIDISTA:")
        for r in exitosos:
            partidos_con_escanos = sum(1 for partido in ['morena', 'pan', 'pri', 'prd', 'pvem', 'pt', 'mc'] 
                                     if r.get(partido, 0) > 0)
            print(f"   {r['mr_seats']} MR: {partidos_con_escanos} partidos con esca√±os")
            
    else:
        print("‚ùå No se obtuvieron resultados exitosos")
    
    print(f"\nüéØ RESUMEN: {len(exitosos)}/{len(resultados)} configuraciones exitosas")
    
    # Conclusiones
    if len(exitosos) >= 2:
        print("\nüí° CONCLUSIONES SOBRE MAYOR√çA RELATIVA PURA:")
        print("1. El sistema MR puro asigna esca√±os por entidad ganadora")
        print("2. MORENA probablemente domine por su fuerza territorial")
        print("3. Los partidos peque√±os pueden quedar sin representaci√≥n") 
        print("4. La concentraci√≥n depende de la geograf√≠a electoral")
        print("5. Diferente al sistema mixto que balancea con RP")
    
    return exitosos

if __name__ == "__main__":
    test_mayoria_relativa_pura()
